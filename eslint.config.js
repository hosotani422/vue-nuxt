import globals from "globals";
import eslintJs from "@eslint/js";
import eslintTs from "typescript-eslint";
import eslintVue from "eslint-plugin-vue";
import eslintPrettier from "eslint-config-prettier";

const nuxtGlobals = {
  useAppConfig: "readonly",
  useAsyncData: "readonly",
  useCookie: "readonly",
  useError: "readonly",
  useFetch: "readonly",
  useHeadSafe: "readonly",
  useHead: "readonly",
  useHydration: "readonly",
  useLazyAsyncData: "readonly",
  useLazyFetch: "readonly",
  useLoadingIndicator: "readonly",
  useNuxtApp: "readonly",
  useNuxtData: "readonly",
  useRequestEvent: "readonly",
  useRequestHeader: "readonly",
  useRequestHeaders: "readonly",
  useRequestURL: "readonly",
  useRoute: "readonly",
  useRouter: "readonly",
  useRuntimeConfig: "readonly",
  useSeoMeta: "readonly",
  useServerSeoMeta: "readonly",
  useState: "readonly",
  $fetch: "readonly",
  abortNavigation: "readonly",
  addRouteMiddleware: "readonly",
  callOnce: "readonly",
  clearError: "readonly",
  clearNuxtData: "readonly",
  clearNuxtState: "readonly",
  createError: "readonly",
  defineNuxtComponent: "readonly",
  defineNuxtRouteMiddleware: "readonly",
  definePageMeta: "readonly",
  defineRouteRules: "readonly",
  navigateTo: "readonly",
  onBeforeRouteLeave: "readonly",
  onBeforeRouteUpdate: "readonly",
  onNuxtReady: "readonly",
  prefetchComponents: "readonly",
  preloadComponents: "readonly",
  preloadRouteComponents: "readonly",
  prerenderRoutes: "readonly",
  refreshNuxtData: "readonly",
  reloadNuxtApp: "readonly",
  setPageLayout: "readonly",
  setResponseStatus: "readonly",
  showError: "readonly",
  updateAppConfig: "readonly",
  nextTick: "readonly",
  defineComponent: "readonly",
  defineAsyncComponent: "readonly",
  defineCustomElement: "readonly",
  ref: "readonly",
  computed: "readonly",
  reactive: "readonly",
  readonly: "readonly",
  watchEffect: "readonly",
  watchPostEffect: "readonly",
  watchSyncEffect: "readonly",
  watch: "readonly",
  isRef: "readonly",
  unref: "readonly",
  toRef: "readonly",
  toValue: "readonly",
  toRefs: "readonly",
  isProxy: "readonly",
  isReactive: "readonly",
  isReadonly: "readonly",
  shallowRef: "readonly",
  triggerRef: "readonly",
  customRef: "readonly",
  shallowReactive: "readonly",
  shallowReadonly: "readonly",
  toRaw: "readonly",
  markRaw: "readonly",
  effectScope: "readonly",
  getCurrentScope: "readonly",
  onScopeDispose: "readonly",
  onMounted: "readonly",
  onUpdated: "readonly",
  onUnmounted: "readonly",
  onBeforeMount: "readonly",
  onBeforeUpdate: "readonly",
  onBeforeUnmount: "readonly",
  onErrorCaptured: "readonly",
  onRenderTracked: "readonly",
  onRenderTriggered: "readonly",
  onActivated: "readonly",
  onDeactivated: "readonly",
  onServerPrefetch: "readonly",
  provide: "readonly",
  inject: "readonly",
  hasInjectionContext: "readonly",
};

export default eslintTs.config(
  {
    files: [`**/*.{js,jsx,ts,tsx,vue}`],
  },
  {
    ignores: [`.nuxt/`, `.output/`, `dist`, `.storybook/`, `coverage/`],
  },
  eslintJs.configs.recommended,
  ...eslintTs.configs.recommended,
  ...eslintVue.configs[`flat/recommended`],
  eslintPrettier,
  {
    name: `custom/recommended`,
    languageOptions: {
      ecmaVersion: `latest`,
      sourceType: `module`,
      parserOptions: {
        parser: eslintTs.parser,
      },
      globals: {
        ...globals.node,
        ...globals.browser,
        ...nuxtGlobals,
      },
    },
    linterOptions: {
      noInlineConfig: true,
      reportUnusedDisableDirectives: `error`,
    },
    rules: {
      "no-empty-pattern": [`off`],
      "@typescript-eslint/no-unused-expressions": [`off`],
      "vue/no-mutating-props": [`off`],
      "vue/multi-word-component-names": [`off`],
    },
  },
);
